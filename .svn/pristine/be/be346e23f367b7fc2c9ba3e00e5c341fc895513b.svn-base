package com.xinwei.kanfangshenqi.fragment.housecircle;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.RelativeLayout;

import com.google.gson.Gson;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.lidroid.xutils.view.annotation.event.OnItemClick;
import com.xinwei.kanfangshenqi.BaseFragment;
import com.xinwei.kanfangshenqi.R;
import com.xinwei.kanfangshenqi.activity.AddAttentionActivity;
import com.xinwei.kanfangshenqi.activity.BuildingCommentActivity;
import com.xinwei.kanfangshenqi.activity.SeachActivity;
import com.xinwei.kanfangshenqi.activity.SeeHouseCircleActivity;
import com.xinwei.kanfangshenqi.adapter.InterestAdp;
import com.xinwei.kanfangshenqi.common.Const;
import com.xinwei.kanfangshenqi.fragment.FaxianFragment;
import com.xinwei.kanfangshenqi.model.Interest;
import com.xinwei.kanfangshenqi.model.SeeHouseCircle;
import com.xinwei.kanfangshenqi.request.HttpRequest;
import com.xinwei.kanfangshenqi.request.HttpRequest.RequestListener;
import com.xinwei.kanfangshenqi.util.Utils;
import com.xinwei.kanfangshenqi.util.ValidatorUtil;
import com.xinwei.kanfangshenqi.view.ListViewWidget;
import com.xinwei.kanfangshenqi.view.ListViewWidget.ListViewWidgetListener;

public class InterestFragment extends BaseFragment implements OnRefreshListener2{
	@ViewInject(R.id.pullToRefresh)
	private PullToRefreshListView pullToRefresh;
	@ViewInject(R.id.rltAddNewInterest)
	private RelativeLayout rltAddNewInterest;
	private InterestAdp adp;
	private String requestTime ;
	private List<Interest> interestList;
	private OnInterestFinishListener onInterestFinishListener = new OnInterestFinishListener(){
		@Override
		public void onInterestFinish() {
			onReloadData();
		}
	};
	public static OnInterestFinishListener OnInterestFinishListener;
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		addChildView(R.layout.fragment_interest);
		OnInterestFinishListener = onInterestFinishListener;
	}
	

	@Override
	public boolean isControlling() {
		if(interestList == null || interestList.size() == 0)
			return false;
		if (pullToRefresh.getRefreshableView().getFirstVisiblePosition() == 0) {
            View view = pullToRefresh.getRefreshableView().getChildAt(0);
            if (view != null && view.getTop() >= 0) {
                return false;
            }
        }
        return true;
	}
	@Override
	public void onReloadData() {
		showBar();
		List<Map<String, String>> paramsContent = new ArrayList<Map<String, String>>();
		Map<String, String> paramsMap1 = new HashMap<String, String>();
		paramsMap1.put(Const.PARAM_LASTTIME, requestTime);
		Map<String, String> paramsMap2 = new HashMap<String, String>();
		paramsMap2.put(Const.PARAM_TYPE, Const.INTEREST_TYPE);
		Map<String, String> paramsMap3 = new HashMap<String, String>();
		paramsMap3.put(Const.PARAM_CURPAGE, String.valueOf(mBeginPage));
		paramsContent.add(paramsMap1);
		paramsContent.add(paramsMap2);
		paramsContent.add(paramsMap3);
		HttpRequest.rest(activity, Const.URL_SEE_HOUSE_CIRCLE, getRequestTag(),
				paramsContent, Utils.getHeaderParamsOnly(), new RequestListener() {

					@Override
					public void onSuccess(String url, String responseResult) {
						SeeHouseCircle shc = new Gson().fromJson(responseResult, SeeHouseCircle.class);
						((SeeHouseCircleActivity)getActivity()).setNavigationNum(shc.getChatCount(), shc.getFollowCount(), shc.getRemindCount());
						interestList = shc.getFollowList();
						if(!ValidatorUtil.isValidList(interestList)){
							showEmpty();
							return;
						}
						interestList.add(null);
						adp = new InterestAdp(activity, interestList);
						pullToRefresh.setAdapter(adp);
						Utils.judgePullLoadStatus(pullToRefresh, mBeginPage, shc.getPageCount());
						isShowContent(true);
					}

					@Override
					public void onFailure(String url, String errorInfo) {
						isShowError(true);
					}

					@Override
					public void onError(String url, String responseResult) {
						isShowError(true);
					}
				});
	}
	@OnClick(R.id.rltAddNewInterest)
	public void onClick(View v){
		switch(v.getId()){
		case R.id.rltAddNewInterest:
			Utils.moveTo(activity, AddAttentionActivity.class);
			break;
		}
	}
	@OnItemClick(R.id.pullToRefresh)
	public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
			long arg3) {
		try {
			Interest interest = (Interest) arg0.getAdapter().getItem(arg2);
			Bundle data = new Bundle();
			data.putString(Const.WEB_TITLE_KEY, interest.getBuildingName());
			data.putString(Const.WEB_LEFT_TITLE_KEY, getString(R.string.see_house_circle));
			data.putSerializable(Interest.class.getSimpleName(), interest);
			Utils.moveTo(activity, BuildingCommentActivity.class,false,data);
		} catch (Exception e) {
		}
	}
	@Override
	public boolean onBackPressed() {
		return false;
	}

	@Override
	public String getRequestTag() {
		return InterestFragment.class.getSimpleName();
	}


	@Override
	public void onChildViewLoaded() {
		requestTime = Utils.getSeeHouseCircleRequestTime();
		pullToRefresh.setOnRefreshListener(this);
		onReloadData();
	}
	private void showEmpty(){
		showCustom(R.layout.fragment_interest_empty).findViewById(R.id.btnInterest).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				Utils.moveTo(activity, AddAttentionActivity.class);
			}
		});
	}

	@Override
	public void onDestroy() {
		OnInterestFinishListener = null;
		super.onDestroy();
	}
	public interface OnInterestFinishListener{
		public void onInterestFinish();
	}
	@Override
	public void onPullDownToRefresh(PullToRefreshBase refreshView, final int mBeginPage) {
		List<Map<String, String>> paramsContent = new ArrayList<Map<String, String>>();
		Map<String, String> paramsMap1 = new HashMap<String, String>();
		paramsMap1.put(Const.PARAM_LASTTIME, requestTime);
		Map<String, String> paramsMap2 = new HashMap<String, String>();
		paramsMap2.put(Const.PARAM_TYPE, Const.INTEREST_TYPE);
		Map<String, String> paramsMap3 = new HashMap<String, String>();
		paramsMap3.put(Const.PARAM_CURPAGE, String.valueOf(mBeginPage));
		paramsContent.add(paramsMap1);
		paramsContent.add(paramsMap2);
		paramsContent.add(paramsMap3);
		HttpRequest.rest(activity, Const.URL_SEE_HOUSE_CIRCLE, getRequestTag(),
				paramsContent, Utils.getHeaderParamsOnly(), new RequestListener() {

					@Override
					public void onSuccess(String url, String responseResult) {
						SeeHouseCircle shc = new Gson().fromJson(responseResult, SeeHouseCircle.class);
						((SeeHouseCircleActivity)getActivity()).setNavigationNum(shc.getChatCount(), shc.getFollowCount(), shc.getRemindCount());
						interestList = shc.getFollowList();
						if(!ValidatorUtil.isValidList(interestList)){
							showEmpty();
							return;
						}
						interestList.add(null);
						adp = new InterestAdp(activity, interestList);
						pullToRefresh.setAdapter(adp);
						Utils.judgePullLoadStatus(pullToRefresh, mBeginPage, shc.getPageCount());
					}

					@Override
					public void onFailure(String url, String errorInfo) {
						pullToRefresh.onRefreshComplete(false);
					}

					@Override
					public void onError(String url, String responseResult) {
						pullToRefresh.onRefreshComplete(false);
					}
				});
	}


	@Override
	public void onPullUpToLoad(PullToRefreshBase refreshView, final int mNextPage) {
		List<Map<String, String>> paramsContent = new ArrayList<Map<String, String>>();
		Map<String, String> paramsMap1 = new HashMap<String, String>();
		paramsMap1.put(Const.PARAM_LASTTIME, requestTime);
		Map<String, String> paramsMap2 = new HashMap<String, String>();
		paramsMap2.put(Const.PARAM_TYPE, Const.INTEREST_TYPE);
		Map<String, String> paramsMap3 = new HashMap<String, String>();
		paramsMap3.put(Const.PARAM_CURPAGE, String.valueOf(mNextPage));
		paramsContent.add(paramsMap1);
		paramsContent.add(paramsMap2);
		paramsContent.add(paramsMap3);
		HttpRequest.rest(activity, Const.URL_SEE_HOUSE_CIRCLE, getRequestTag(),
				paramsContent, Utils.getHeaderParamsOnly(), new RequestListener() {

					@Override
					public void onSuccess(String url, String responseResult) {
						SeeHouseCircle shc = new Gson().fromJson(responseResult, SeeHouseCircle.class);
						((SeeHouseCircleActivity)getActivity()).setNavigationNum(shc.getChatCount(), shc.getFollowCount(), shc.getRemindCount());
						if(shc.getFollowList()!=null&&shc.getFollowList().size()>0){
							interestList.remove(interestList.size()-1);
							interestList.addAll(shc.getFollowList());
							adp.notifyDataSetChanged();
						}
						Utils.judgePullLoadStatus(pullToRefresh, mBeginPage, shc.getPageCount());
					}

					@Override
					public void onFailure(String url, String errorInfo) {
						pullToRefresh.onRefreshComplete(false);
					}

					@Override
					public void onError(String url, String responseResult) {
						pullToRefresh.onRefreshComplete(false);
					}
				});		
	}

}