package com.xinwei.kanfangshenqi.activity;

import java.util.Timer;
import java.util.TimerTask;

import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.lidroid.xutils.view.annotation.ContentView;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.xinwei.kanfangshenqi.BaseActivity;
import com.xinwei.kanfangshenqi.R;
import com.xinwei.kanfangshenqi.app.VolleyManager;
import com.xinwei.kanfangshenqi.common.Const;
import com.xinwei.kanfangshenqi.request.GetCodeRequest;
import com.xinwei.kanfangshenqi.request.RegisterRequest;
import com.xinwei.kanfangshenqi.request.UserInfoRequest;
import com.xinwei.kanfangshenqi.response.GetCodeResponse;
import com.xinwei.kanfangshenqi.response.RegisterResponse;
import com.xinwei.kanfangshenqi.response.UserInfoResponse;
import com.xinwei.kanfangshenqi.util.StringUtils;
import com.xinwei.kanfangshenqi.util.Utils;
import com.xinwei.kanfangshenqi.util.ViewUtils;
import com.xinwei.kanfangshenqi.util.WebUtils;
import com.xinwei.kanfangshenqi.view.TitleBarView;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
/**
 * 注册界面
 * 
 * @author 
 * 
 */
@ContentView(R.layout.activity_register)
public class RegisterActivity extends BaseActivity {

	@ViewInject(R.id.titlebar)
	private TitleBarView mTitleBarView;
	
	@ViewInject(R.id.input_phone)
	private EditText mEditPhone;
	
	@ViewInject(R.id.input_code)
	private EditText mEditCode;
	
	@ViewInject(R.id.input_password)
	private EditText mEditPwd;
	
	@ViewInject(R.id.input_password_agen)
	private EditText mEditPwdAgen;
	
	@ViewInject(R.id.btn)
	private Button mBtn;
	
	@ViewInject(R.id.reget_code)
	private TextView mBtnGetCode;
	
	@ViewInject(R.id.checkBox)
	private CheckBox mCheckBox;
	
	@ViewInject(R.id.treaty)
	private TextView treaty;
	private String mUserAccount;
	
	private String mUserPwd;

    private Timer timer;

    private static final int PERIOD = 1;

    private int begin = 60;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		isShowTitle(false);
		ViewUtils.inject(this);
		mTitleBarView.setListener(this);
		mTitleBarView.setTitle("注册");
		mTitleBarView.setRightView(R.drawable.zhuce_cancel, "登录");
		mTitleBarView.setShowLine();
		mBtnGetCode.setEnabled(false);
		mBtn.setEnabled(false);
		mEditPhone.addTextChangedListener(new TextWatcher() {
			
			@Override
			public void onTextChanged(CharSequence s, int start, int before, int count) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void beforeTextChanged(CharSequence s, int start, int count, int after) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub
				if(s.length()>0){
					mBtnGetCode.setEnabled(true);
				}else{
					mBtnGetCode.setEnabled(false);
				}
				if(s.length()>0&&
						mEditCode.getText().length()>0&&
						mEditPwd.getText().length()>0&&
						mEditPwdAgen.getText().length()>0&&
						mCheckBox.isChecked()){
					mBtn.setEnabled(true);
				}else{
					mBtn.setEnabled(false);
				}
			}
		});
		mEditCode.addTextChangedListener(new TextWatcher() {
			
			@Override
			public void onTextChanged(CharSequence s, int start, int before, int count) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void beforeTextChanged(CharSequence s, int start, int count, int after) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub
				if(s.length()>0&&
						mEditPhone.getText().length()>0&&
						mEditPwd.getText().length()>0&&
						mEditPwdAgen.getText().length()>0&&
						mCheckBox.isChecked()){
					mBtn.setEnabled(true);
				}else{
					mBtn.setEnabled(false);
				}
			}
		});
		mEditPwd.addTextChangedListener(new TextWatcher() {
			
			@Override
			public void onTextChanged(CharSequence s, int start, int before, int count) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void beforeTextChanged(CharSequence s, int start, int count, int after) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub
				if(s.length()>0&&
						mEditPhone.getText().length()>0&&
						mEditCode.getText().length()>0&&
						mEditPwdAgen.getText().length()>0&&
						mCheckBox.isChecked()){
					mBtn.setEnabled(true);
				}else{
					mBtn.setEnabled(false);
				}
			}
		});
		mEditPwdAgen.addTextChangedListener(new TextWatcher() {
			
			@Override
			public void onTextChanged(CharSequence s, int start, int before, int count) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void beforeTextChanged(CharSequence s, int start, int count, int after) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub
				if(s.length()>0&&
						mEditPhone.getText().length()>0&&
						mEditCode.getText().length()>0&&
						mEditPwd.getText().length()>0&&
						mCheckBox.isChecked()){
					mBtn.setEnabled(true);
				}else{
					mBtn.setEnabled(false);
				}
			}
		});
	}
	@Override
	public void onClickRightComponent() {
		finish();
	}
	protected String phString;
	
	/**
	 * 获取验证码
	 * 
	 * @param view
	 */
	@OnClick(R.id.reget_code)
	public void doReGetCode(View view) {
		if (Utils.checkPhoneNum(mEditPhone.getText().toString())) {
			showBar();
			GetCodeRequest request = new GetCodeRequest(
					createGetCodeSuccessListener(), this);
			request.setPhone(mEditPhone.getText().toString());
			//0：注册，1：忘记密码
			request.setCodeType("0");
			WebUtils.doPost(request);
			mBtnGetCode.setText("获取中...");

			mBtnGetCode.setEnabled(false);
		} else {
			Utils.makeToastAndShow(this, "手机号码不合法,请重新输入", Toast.LENGTH_SHORT);
		}
		
		if (!TextUtils.isEmpty(mEditPhone.getText().toString())) {
			phString = mEditPhone.getText().toString();
		} else {
			Toast.makeText(this, "手机号码不合法,请重新输入",
					Toast.LENGTH_SHORT).show();
		}
	}
	@OnClick(R.id.checkBox)
	public void onClickCheckBox(View v){
		if(mCheckBox.isChecked()){
			if(mEditPhone.getText().length()>0&&
					mEditCode.getText().length()>0&&
					mEditPwd.getText().length()>0&&
					mEditPwdAgen.getText().length()>0){
				mBtn.setEnabled(true);
			}else{
				mBtn.setEnabled(false);
			}
		}else{
			mBtn.setEnabled(false);
		}
	}
	@OnClick(R.id.txtAgree)
	public void onClick(View v){
		if(mCheckBox.isChecked()){
			mCheckBox.setChecked(false);
			mBtn.setEnabled(false);
		}else{
			mCheckBox.setChecked(true);
			if(mEditPhone.getText().length()>0&&
					mEditCode.getText().length()>0&&
					mEditPwd.getText().length()>0&&
					mEditPwdAgen.getText().length()>0
					){
				mBtn.setEnabled(true);
			}else{
				mBtn.setEnabled(false);
			}
		}
	}
	/**
	 * 获取验证码监听
	 * 
	 * @return
	 */
	private Response.Listener<GetCodeResponse> createGetCodeSuccessListener() {
		return new Response.Listener<GetCodeResponse>() {
			@Override
			public void onResponse(GetCodeResponse response) {
				// mTvResult.setText(Long.toString(response.getNanoseconds()));
				closeBar();
				if (response != null && response.getStatus().equals("1")) {// ok
                    beginTimer();
					mEditCode.setFocusable(true);
					Utils.makeToastAndShow(getBaseContext(), "获取成功, 请查收您的短信", Toast.LENGTH_SHORT);
				} else {
					Toast.makeText(getBaseContext(), response == null? "未知错误" :response.getMsg(),
							Toast.LENGTH_SHORT).show();
                    mBtnGetCode.setText(getResources().getString(
                            R.string.get_verification_code));
                    mBtnGetCode.setEnabled(true);
				}
			}
		};
	}

    Handler mHandler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what){
                case PERIOD:
                    if(begin == 0){
                        begin = 61;
                        timer.cancel();
                        mBtnGetCode.setText(getResources().getString(
                                R.string.get_verification_code));
                        mBtnGetCode.setEnabled(true);
                    }else{
                        mBtnGetCode.setText(String.valueOf(begin));
                    }
                    begin--;
                    break;
                default:
                	int event = msg.arg1;
    				int result = msg.arg2;
    				Object data = msg.obj;
            }
        }
    };
    /**
     * 注册
     *
     * @param view
     */
    private void beginTimer() {
        timer = new Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                mHandler.sendEmptyMessage(PERIOD);
            }
        };
        timer.schedule(task, 0, 1000);
    }
    @OnClick(R.id.treaty)
    public void lookTreaty(View view){
    	Bundle data = new Bundle();
    	data.putString(Const.WEB_URL_KEY, Const.PROTOCOL_URL);
    	data.putString(Const.WEB_TITLE_KEY,getString(R.string.user_registration_protocol));
    	data.putString(Const.WEB_LEFT_TITLE_KEY,getString(R.string.register));
    	Utils.moveTo(this, WebActivity.class, false, data);
    }
	@OnClick(R.id.btn)
	public void doRegister(View view) {
		if (checkInput()) {
			showBar();
			mUserAccount = mEditPhone.getText().toString();
			mUserPwd = Utils.getMD5(mEditPwd.getText().toString());
			RegisterRequest request = new RegisterRequest(
					new Listener<RegisterResponse>() {
						@Override
						public void onResponse(RegisterResponse response) {
							
							if (response.getStatus().equals("1")) {// ok
								Utils.makeToastAndShow(RegisterActivity.this,
										RegisterActivity.this.getResources().getString(R.string.register_success),
										Toast.LENGTH_SHORT);
								finish();
							} else {
								Utils.makeToastAndShow(RegisterActivity.this,
										response.getMsg(),
										Toast.LENGTH_SHORT);
								closeBar();
							}
						}
					}, this);
			request.setAccount(mUserAccount);
			request.setCode(mEditCode.getText().toString());
//			request.setPassword(StringUtils.md5(mEditPwd.getText().toString()));
			request.setPassword(mUserPwd);
			WebUtils.doPost(request);

		}
	}

	private boolean checkInput() {
		if (!Utils.checkPhoneNum(mEditPhone.getText().toString())) {// 检查手机号码
			Utils.makeToastAndShow(this, "手机号码不合法,请重新输入", Toast.LENGTH_SHORT);
			return false;
		}
		if (StringUtils.isEmpty(mEditCode.getText().toString())) {
			Utils.makeToastAndShow(this, "验证码为空", Toast.LENGTH_SHORT);
			return false;
		}
		if(!mCheckBox.isChecked()){
			Utils.makeToastAndShow(this, "请同意看房神器用户注册协议", Toast.LENGTH_SHORT);
			return false;
		}
//		boolean flag = Utils.checkPwd(mEditPwd.getText().toString());
//		if(!flag){
//			Utils.makeToastAndShow(this, "密码为6-16位字母或数字", Toast.LENGTH_SHORT);
//		}
//		return flag;
		return true;
	}
	

	@Override
	public void requestError(VolleyError error) {
		closeBar();
		super.requestError(error);
		mBtnGetCode.setEnabled(true);
		mBtnGetCode.setText(getResources().getString(
				R.string.get_verification_code));
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
	}
	@Override
	public void onChildViewLoaded() {
		
	}
	@Override
	public void onReloadData() {
		
	}
	@Override
	public String getRequestTag() {
		return null;
	}
}
