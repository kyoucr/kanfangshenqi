package com.xinwei.kanfangshenqi.activity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.king.photo.activity.PublishActivity;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.lidroid.xutils.view.annotation.event.OnItemClick;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.xinwei.kanfangshenqi.BaseActivity;
import com.xinwei.kanfangshenqi.R;
import com.xinwei.kanfangshenqi.adapter.BuildingDetailAdp;
import com.xinwei.kanfangshenqi.common.Const;
import com.xinwei.kanfangshenqi.model.BuildingDetail;
import com.xinwei.kanfangshenqi.model.BuildingDetail.Building;
import com.xinwei.kanfangshenqi.model.Interest;
import com.xinwei.kanfangshenqi.request.HttpRequest;
import com.xinwei.kanfangshenqi.request.HttpRequest.RequestListener;
import com.xinwei.kanfangshenqi.util.ImageLoaderUtil;
import com.xinwei.kanfangshenqi.util.PreferenceUtils;
import com.xinwei.kanfangshenqi.util.ToastUtil;
import com.xinwei.kanfangshenqi.util.Utils;
import com.xinwei.kanfangshenqi.util.ValidatorUtil;
import com.xinwei.kanfangshenqi.view.CircleImageViewWithBorder;
import com.xinwei.kanfangshenqi.view.ListViewWidget;
import com.xinwei.kanfangshenqi.view.ListViewWidget.ListViewWidgetListener;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.RelativeLayout;
/**
 ********************
 * 楼盘详情
 * @author cn
 ********************
 */
public class BuildingCommentActivity extends BaseActivity implements ListViewWidgetListener{
	private Interest interestPre;
	private int beginPage = 1;
	@ViewInject(R.id.imgHead)
	private CircleImageViewWithBorder imgHead;
	@ViewInject(R.id.lViInterest)
	private ListViewWidget lViInterest;
	private BuildingDetailAdp buildingDetailAdp;
	private List<Building> buildingList;
	@ViewInject(R.id.imgTop)
	private ImageView imgTop;
	@ViewInject(R.id.rltEmpty)
	private RelativeLayout rltEmpty;
	private BuildingDetail buildingDetail;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		addChildView(R.layout.activity_interest_detail);
	}

	@Override
	public void onChildViewLoaded() {
		interestPre = (Interest) getIntent().getSerializableExtra(
				Interest.class.getSimpleName());
		if(interestPre==null){
			finish();
			return;
		}
		String titleLeft = getIntent().getStringExtra(Const.WEB_LEFT_TITLE_KEY);
		if(ValidatorUtil.isValidString(titleLeft)){
			setLeftTitle(titleLeft);
		}
		String title = getIntent().getStringExtra(Const.WEB_TITLE_KEY);
		if(ValidatorUtil.isValidString(title)){
			setTitleTxt(title);
		}
//		setTitleTxt(interestPre.getBuildingName());
		lViInterest.setListViewWidgetListener(this);
		imgBtnRight.setImageDrawable(getResources().getDrawable(R.drawable.copyreader_nav_button));
		imgBtnRight.setVisibility(View.VISIBLE);
		ImageLoaderUtil.getInstance().bindHeadImg(imgHead, PreferenceUtils.getInstance(activity).getSettingUserPic());
		ImageLoaderUtil.getInstance().bindImg(imgTop, interestPre.getBanner());
		onReloadData();
	}
	@Override
	public void onReloadData() {
		showBar();
		List<Map<String,String>> paramsContent = new ArrayList<Map<String,String>>();
		Map<String,String> paramMap1 = new HashMap<String,String>();
		paramMap1.put(Const.PARAM_BUILDING_ID, interestPre.getBuildingId());
		Map<String,String> paramMap2 = new HashMap<String,String>();
		paramMap2.put(Const.PARAM_cURPAGE, String.valueOf(beginPage));
		paramsContent.add(paramMap1);
		paramsContent.add(paramMap2);
		HttpRequest.rest(activity, Const.URL_INTEREST_DETAIL, getRequestTag(), paramsContent, Utils.getHeaderParamsOnly(),new RequestListener() {
			@Override
			public void onSuccess(String url, String responseResult) {
				buildingDetail = new Gson().fromJson(responseResult, BuildingDetail.class);
				Utils.judgeListViewStatus(lViInterest, beginPage, buildingDetail.getPageCount());
				buildingList = buildingDetail.getDataList();
				if(!ValidatorUtil.isValidList(buildingList)){
					rltEmpty.setVisibility(View.VISIBLE);
//					lViInterest.setVisibility(View.GONE);
					isShowContent(true);
					return;
				}
				buildingDetailAdp = new BuildingDetailAdp(activity, buildingList);
				lViInterest.setAdapter(buildingDetailAdp);
				isShowContent(true);
			}
			
			@Override
			public void onFailure(String url, String errorInfo) {
				isShowError(true);
				
			}
			
			@Override
			public void onError(String url, String responseResult) {
				isShowError(true);
			}
		});
	}
	@OnItemClick(R.id.lViInterest)
	public void onItemClick(AdapterView<?> arg0, View arg1,
			int arg2, long arg3) {
		try {
			Building building = (Building) arg0.getAdapter().getItem(arg2);
			Bundle data = new Bundle();
			data.putString(AskDetailNewActivity.class.getSimpleName(), building.getCommentId());
			data.putBoolean(Const.URL_BUILDING_COMMENT_DETAIL, true);
			data.putString(Const.WEB_LEFT_TITLE_KEY, "楼盘评论");
//			data.putString(Const.WEB_TITLE_KEY,buildingDetail.getBuildingName());
			Utils.moveTo(activity, AskDetailNewActivity.class, false, data);
		} catch (Exception e) {
		}
	}
	@OnClick(R.id.imgBtnRight)
	public void comment(View v){
		if(buildingDetail.getIsLook()){
			Bundle data = new Bundle();
			data.putString(Const.PARAM_BUILDING_ID, interestPre.getBuildingId());
			Intent intent = new Intent(activity,PublishActivity.class);
			intent.putExtras(data);
			startActivityForResult(intent, RESULT_OK);
		}else{
			ToastUtil.show(activity, "您未看过此楼盘，不能发表");
		}
	}
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if(resultCode == RESULT_OK){
			onReloadData();
		}
	}
	@Override
	public String getRequestTag() {
		return BuildingCommentActivity.class.getSimpleName();
	}

	@Override
	public void onRefresh() {
		List<Map<String,String>> paramsContent = new ArrayList<Map<String,String>>();
		Map<String,String> paramMap1 = new HashMap<String,String>();
		paramMap1.put(Const.PARAM_BUILDING_ID, interestPre.getBuildingId());
		Map<String,String> paramMap2 = new HashMap<String,String>();
		paramMap2.put(Const.PARAM_cURPAGE, String.valueOf(beginPage));
		paramsContent.add(paramMap1);
		paramsContent.add(paramMap2);
		HttpRequest.rest(activity, Const.URL_INTEREST_DETAIL, getRequestTag(), paramsContent, Utils.getHeaderParamsOnly(),new RequestListener() {
			@Override
			public void onSuccess(String url, String responseResult) {
				buildingDetail = new Gson().fromJson(responseResult, BuildingDetail.class);
				Utils.judgeListViewStatus(lViInterest, beginPage, buildingDetail.getPageCount());
				buildingList = buildingDetail.getDataList();
				if(!ValidatorUtil.isValidList(buildingList)){
					rltEmpty.setVisibility(View.VISIBLE);
					return;
				}
				buildingDetailAdp = new BuildingDetailAdp(activity, buildingList);
				lViInterest.setAdapter(buildingDetailAdp);
				isShowContent(true);
			}
			
			@Override
			public void onFailure(String url, String errorInfo) {
				lViInterest.stopRefresh(false);
				
			}
			
			@Override
			public void onError(String url, String responseResult) {
				lViInterest.stopRefresh(false);
			}
		});
	}

	@Override
	public void onLoadMore(final int nextPage) {
		List<Map<String,String>> paramsContent = new ArrayList<Map<String,String>>();
		Map<String,String> paramMap1 = new HashMap<String,String>();
		paramMap1.put(Const.PARAM_BUILDING_ID, interestPre.getBuildingId());
		Map<String,String> paramMap2 = new HashMap<String,String>();
		paramMap2.put(Const.PARAM_cURPAGE, String.valueOf(nextPage));
		paramsContent.add(paramMap1);
		paramsContent.add(paramMap2);
		HttpRequest.rest(activity, Const.URL_INTEREST_DETAIL, getRequestTag(), paramsContent, Utils.getHeaderParamsOnly(),new RequestListener() {
			@Override
			public void onSuccess(String url, String responseResult) {
				isShowContent(true);
				BuildingDetail buildingDetail= new Gson().fromJson(responseResult, BuildingDetail.class);
				Utils.judgeListViewStatus(lViInterest, nextPage, buildingDetail.getPageCount());
				buildingList.addAll(buildingDetail.getDataList());
				buildingDetailAdp.notifyDataSetChanged();
			}
			
			@Override
			public void onFailure(String url, String errorInfo) {
				lViInterest.stopLoadMore(false);
				
			}
			
			@Override
			public void onError(String url, String responseResult) {
				lViInterest.stopLoadMore(false);
			}
		});
	}

}
