package com.xinwei.kanfangshenqi.fragment;

import java.util.List;
import java.util.Map;

import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;

import com.google.gson.Gson;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnItemClick;
import com.xinwei.kanfangshenqi.BaseFragment;
import com.xinwei.kanfangshenqi.R;
import com.xinwei.kanfangshenqi.activity.TradeDetailInfoActivity;
import com.xinwei.kanfangshenqi.activity.TradeRecordActivity;
import com.xinwei.kanfangshenqi.adapter.TradeRecordAdp;
import com.xinwei.kanfangshenqi.common.Const;
import com.xinwei.kanfangshenqi.model.TradeRecordList;
import com.xinwei.kanfangshenqi.model.TradeRecordList.TradeRecord;
import com.xinwei.kanfangshenqi.request.HttpRequest;
import com.xinwei.kanfangshenqi.request.HttpRequest.RequestListener;
import com.xinwei.kanfangshenqi.util.Utils;
import com.xinwei.kanfangshenqi.util.ValidatorUtil;
import com.xinwei.kanfangshenqi.view.ListViewWidget;
import com.xinwei.kanfangshenqi.view.ListViewWidget.ListViewWidgetListener;

/**
 ******************** 
 * 提现
 * 
 * @author cn
 ******************** 
 */
public class PickCashFragment extends BaseFragment implements OnRefreshListener2 {
	@ViewInject(R.id.pullToRefresh)
	private PullToRefreshListView pullToRefresh;
	private TradeRecordAdp tradeRecordAdp;
	private List<TradeRecord> tradeRecordDataList;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		addChildView(R.layout.fragment_trade_record);
	}

	@Override
	public void onChildViewLoaded() {
		pullToRefresh.setOnRefreshListener(this);
		pullToRefresh.getRefreshableView().setFooterDividersEnabled(true);
		pullToRefresh.getRefreshableView().setHeaderDividersEnabled(true);
		setEmptyPage(R.drawable.ic_pick_cash_empty, R.string.hint_pick_cash_empty);
		onVisible();
	}

	@Override
	protected void onVisible() {
		if (!isPrepared || !isVisible || mHasLoadedOnce) {
			return;
		}
		onReloadData();
	}

	@Override
	public void onReloadData() {
		mHasLoadedOnce = true;
		showBar();
		HttpRequest.get(activity, Const.URL_CASH_RECORD + String.valueOf(mBeginPage), getRequestTag(), null, Utils.getHeaderParamsOnly(),
				new RequestListener() {

					@Override
					public void onSuccess(String url, String responseResult) {
						TradeRecordList tradeRecordList = new Gson().fromJson(responseResult, TradeRecordList.class);
						tradeRecordDataList = tradeRecordList.getDataList();
						if (!ValidatorUtil.isValidList(tradeRecordDataList)) {
							isShowEmpty(true);
							return;
						}
						tradeRecordAdp = new TradeRecordAdp(activity, tradeRecordDataList);
						pullToRefresh.setAdapter(tradeRecordAdp);
						Utils.judgePullRefreshStatus(pullToRefresh, mBeginPage, tradeRecordList.getPageCount());
						isShowContent(true);
					}

					@Override
					public void onFailure(String url, String errorInfo) {
						isShowError(true);
					}

					@Override
					public void onError(String url, String responseResult) {
						isShowError(true);
					}
				},true);
	}

	@OnItemClick(R.id.pullToRefresh)
	public void toTradeDetail(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
		Bundle data = new Bundle();
		data.putSerializable(TradeRecord.class.getSimpleName(), tradeRecordDataList.get(arg2 - 1));
		Utils.moveTo(activity, TradeDetailInfoActivity.class, false, data);
	}

	@Override
	public boolean onBackPressed() {
		return false;
	}

	@Override
	public String getRequestTag() {
		return PickCashFragment.class.getSimpleName();
	}

	@Override
	public void onPullDownToRefresh(PullToRefreshBase refreshView, final int mBeginPage) {
		HttpRequest.get(activity, Const.URL_CASH_RECORD + String.valueOf(mBeginPage), getRequestTag(), null, Utils.getHeaderParamsOnly(),
				new RequestListener() {

					@Override
					public void onSuccess(String url, String responseResult) {
						TradeRecordList tradeRecordList = new Gson().fromJson(responseResult, TradeRecordList.class);
						tradeRecordDataList = tradeRecordList.getDataList();
						if (!ValidatorUtil.isValidList(tradeRecordDataList)) {
							isShowEmpty(true);
							return;
						}
						tradeRecordAdp = new TradeRecordAdp(activity, tradeRecordDataList);
						pullToRefresh.setAdapter(tradeRecordAdp);
						Utils.judgePullRefreshStatus(pullToRefresh, mBeginPage, tradeRecordList.getPageCount());
					}

					@Override
					public void onFailure(String url, String errorInfo) {
						pullToRefresh.onRefreshComplete(false);
					}

					@Override
					public void onError(String url, String responseResult) {
						pullToRefresh.onRefreshComplete(false);
					}
				},true);
	}

	@Override
	public void onPullUpToLoad(PullToRefreshBase refreshView, final int mNextPage) {
		HttpRequest.get(activity, Const.URL_CASH_RECORD + String.valueOf(mNextPage), getRequestTag(), null, Utils.getHeaderParamsOnly(),
				new RequestListener() {
					@Override
					public void onSuccess(String url, String responseResult) {
						TradeRecordList tradeRecordList = new Gson().fromJson(responseResult, TradeRecordList.class);
						tradeRecordDataList.addAll(tradeRecordList.getDataList());
						Utils.judgePullRefreshStatus(pullToRefresh, mNextPage, tradeRecordList.getPageCount());
						pullToRefresh.onRefreshComplete(true);
						tradeRecordAdp.notifyDataSetChanged();
					}

					@Override
					public void onFailure(String url, String errorInfo) {
						pullToRefresh.onRefreshComplete(false);
					}

					@Override
					public void onError(String url, String responseResult) {
						pullToRefresh.onRefreshComplete(false);
					}
				},true);
	}

}
