package com.xinwei.kanfangshenqi.fragment;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationClient;
import com.amap.api.location.AMapLocationClientOption;
import com.amap.api.location.AMapLocationClientOption.AMapLocationMode;
import com.amap.api.location.AMapLocationListener;
import com.amap.api.maps2d.AMap;
import com.amap.api.maps2d.AMap.OnCameraChangeListener;
import com.amap.api.maps2d.AMap.OnMarkerClickListener;
import com.amap.api.maps2d.CameraUpdateFactory;
import com.amap.api.maps2d.LocationSource;
import com.amap.api.maps2d.MapView;
import com.amap.api.maps2d.model.BitmapDescriptor;
import com.amap.api.maps2d.model.BitmapDescriptorFactory;
import com.amap.api.maps2d.model.CameraPosition;
import com.amap.api.maps2d.model.LatLng;
import com.amap.api.maps2d.model.Marker;
import com.amap.api.maps2d.model.MarkerOptions;
import com.amap.api.maps2d.model.MyLocationStyle;
import com.amap.api.maps2d.model.VisibleRegion;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.google.gson.Gson;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.xinwei.kanfangshenqi.BaseFragment;
import com.xinwei.kanfangshenqi.R;
import com.xinwei.kanfangshenqi.activity.BuildingDetailInfoActivity;
import com.xinwei.kanfangshenqi.activity.CashRedPacketActivity;
import com.xinwei.kanfangshenqi.activity.ChangeAddressWordActivity;
import com.xinwei.kanfangshenqi.activity.MainActivity;
import com.xinwei.kanfangshenqi.activity.SeachActivity;
import com.xinwei.kanfangshenqi.adapter.LouPanAdapter;
import com.xinwei.kanfangshenqi.common.Const;
import com.xinwei.kanfangshenqi.model.DataList;
import com.xinwei.kanfangshenqi.model.PlansInfo;
import com.xinwei.kanfangshenqi.model.PlansModel;
import com.xinwei.kanfangshenqi.model.buildingAreaList;
import com.xinwei.kanfangshenqi.request.AddPlansRequest;
import com.xinwei.kanfangshenqi.request.CityOfHousesRequest;
import com.xinwei.kanfangshenqi.request.HttpRequest;
import com.xinwei.kanfangshenqi.request.HttpRequest.RequestListener;
import com.xinwei.kanfangshenqi.request.PlansRequest;
import com.xinwei.kanfangshenqi.response.CityOfHousesResponse;
import com.xinwei.kanfangshenqi.response.HttpResponse;
import com.xinwei.kanfangshenqi.response.NameOfHousesResponse;
import com.xinwei.kanfangshenqi.response.PlansResponse;
import com.xinwei.kanfangshenqi.util.PreferenceUtils;
import com.xinwei.kanfangshenqi.util.StringUtils;
import com.xinwei.kanfangshenqi.util.ToastUtil;
import com.xinwei.kanfangshenqi.util.Utils;
import com.xinwei.kanfangshenqi.util.ValidatorUtil;
import com.xinwei.kanfangshenqi.util.WebUtils;
import com.xinwei.kanfangshenqi.util.XmlUtil;
import com.xinwei.kanfangshenqi.view.CircleImageViewWithBorder;
import com.xinwei.kanfangshenqi.view.ListViewWidget;
import com.xinwei.kanfangshenqi.view.ListViewWidget.ListViewWidgetListener;

import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.PopupWindow.OnDismissListener;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

/**
 * 首页
 * 
 * @author jzl
 * 
 */
public class ZhaoFangFragmentOld extends BaseFragment implements LocationSource,
		AMapLocationListener, OnMarkerClickListener, Response.ErrorListener,
		OnCameraChangeListener, OnClickListener, ListViewWidgetListener {

	private View mParent;

	private FragmentActivity mActivity;

	@ViewInject(R.id.map)
	private MapView mapView;
	@ViewInject(R.id.ll_top_title)
	private LinearLayout tv_top_title;
	@ViewInject(R.id.company)
	private ImageView iv_company;
	@ViewInject(R.id.home)
	private ImageView iv_home;
	private AMap aMap;
	private OnLocationChangedListener mListener;
	private AMapLocationClient mlocationClient;
	private AMapLocationClientOption mLocationOption;

	private Double geoLat;
	private Double geoLng;
	private PopupWindow popupwindow = null;
	private View contentView;
	private LayoutInflater mLayoutInflater;
	private ArrayList<buildingAreaList> myAreaList;
	private Spinner spin_quyu;
	private Spinner spin_jiage;
	private Spinner spin_tese;
	private Marker myMarker;
	private ImageView iv_list;
	private ImageView iv_bao;
	private MarkerOptions markerOptions = new MarkerOptions();
	public static ArrayList<DataList> loupanList;
	private ListViewWidget houselist;
	private boolean isListFragment = false;
	private Bundle savedInstanceState;
	private Bundle data = new Bundle();
	private Map<String, String> map = new HashMap<String, String>();
	private boolean IsFirstTeSe = true;
	private boolean IsFirstQuYu = true;
	private boolean IsFirstJiaQian = true;
	private ArrayList<PlansModel> plansModel;
	private ArrayList<PlansInfo> plansInfo = new ArrayList<PlansInfo>();
	private boolean IsHaveBuildingId = false;
	private PopupWindow popuWindow1 = null;
	private View contentView1;
	private PopupWindow popuWindows = null;
	private View contentViews;
	private int numbers = 1;
	private PopupWindow popuWindowZhiDaoLouPan = null;
	private View contentViewZhiDaoLouPan;
	private PreferenceUtils preferenceUtils;

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		mParent = getView();
		mActivity = getActivity();
		preferenceUtils = PreferenceUtils.getInstance(activity);
		// getLouPan();
		// getLouPanArea();
		getLouPanQingDan();
		// initPopuWindowFirstRedPacket(mParent);
	}

	private CityOfHousesRequest cityOfHousesRequest;
	private ArrayAdapter adpterPrice;

	private void getLouPanArea() {
		if (cityOfHousesRequest != null)
			cityOfHousesRequest.cancel();
		if (requestLouPanXin != null)
			requestLouPanXin.cancel();
		cityOfHousesRequest = new CityOfHousesRequest(
				new Listener<CityOfHousesResponse>() {

					@Override
					public void onResponse(CityOfHousesResponse response) {
						if (!(response != null && "1".equals(response
								.getStatus()))) {//
							judgeShowAreaOrDetail();
							return;
						}
						myAreaList = response.getBuildingAreaList();
						if (adpterPrice == null) {
							String[] pirce = new String[response.getPirceList()
									.size() + 1];
							pirce[0] = "价格";
							for (int i = 0; i < response.getPirceList().size(); i++) {
								pirce[i + 1] = response.getPirceList().get(i)
										.getPriceSection();
							}
							adpterPrice = new ArrayAdapter(mActivity,
									R.layout.spinner_item, R.id.text, pirce);
							spin_jiage.setAdapter(adpterPrice);
							spin_jiage
									.setOnItemSelectedListener(new OnItemSelectedListener() {
										public void onItemSelected(
												AdapterView<?> parent,
												View view, int position, long id) {
											if (IsFirstJiaQian) {
												IsFirstJiaQian = false;
											} else {
												map.put("priceId", position
														+ "");
												getLouPanXin(
														Const.URL_NAME_OF_HOUSES,
														map, true);
											}
										}

										public void onNothingSelected(
												AdapterView<?> parent) {
										}
									});
							String[] quyu = new String[response.getAreaList()
									.size() + 1];
							quyu[0] = "区域";
							for (int i = 0; i < response.getAreaList().size(); i++) {
								quyu[i + 1] = response.getAreaList().get(i)
										.getAreaName();
							}
							ArrayAdapter adpterquyu = new ArrayAdapter(
									mActivity, R.layout.spinner_item,
									R.id.text, quyu);
							spin_quyu.setAdapter(adpterquyu);
							spin_quyu
									.setOnItemSelectedListener(new OnItemSelectedListener() {
										public void onItemSelected(
												AdapterView<?> parent,
												View view, int position, long id) {
											if (IsFirstQuYu) {
												IsFirstQuYu = false;
											} else {
												map.put("areaId", position + "");
												getLouPanXin(
														Const.URL_NAME_OF_HOUSES,
														map, true);
											}
										}

										public void onNothingSelected(
												AdapterView<?> parent) {
										}
									});
							String[] tese = new String[response
									.getBuildingFeatureList().size() + 1];
							tese[0] = "特色";
							for (int i = 0; i < response
									.getBuildingFeatureList().size(); i++) {
								tese[i + 1] = response.getBuildingFeatureList()
										.get(i).getFeatureName();
							}
							ArrayAdapter adptertese = new ArrayAdapter(
									mActivity, R.layout.spinner_item,
									R.id.text, tese);
							spin_tese.setAdapter(adptertese);
							spin_tese
									.setOnItemSelectedListener(new OnItemSelectedListener() {
										public void onItemSelected(
												AdapterView<?> parent,
												View view, int position, long id) {
											if (IsFirstTeSe) {
												IsFirstTeSe = false;
											} else {
												map.put("featureId", position
														+ "");
												getLouPanXin(
														Const.URL_NAME_OF_HOUSES,
														map, true);
											}
										}

										public void onNothingSelected(
												AdapterView<?> parent) {
										}
									});
						}
						if (aMap.getMapScreenMarkers() != null
								&& aMap.getMapScreenMarkers().size() > 0) {
							List<Marker> marker = aMap.getMapScreenMarkers();
							for (Marker marker1 : marker) {
								// if(marker1.getTitle()!=null)
								// if(marker1.getTitle().contains("loupan")) {
								// marker1.destroy();
								// }
								if (marker1.getObject() != null)
									if (("qu").equals(marker1.getObject()
											.toString())) {
										marker1.remove();
										marker1.destroy();
									}
								aMap.invalidate();
							}
						}
						for (int i = 0; i < myAreaList.size(); i++) {
							addDistrictMarker(myAreaList.get(i).getAreaName(),
									myAreaList.get(i).getBuildingCount(),
									Double.parseDouble(myAreaList.get(i)
											.getLatitude()), Double
											.parseDouble(myAreaList.get(i)
													.getLongitude()));
							//
							// }
						}
						judgeShowAreaOrDetail();
					}

				}, this);
		WebUtils.doPost(cityOfHousesRequest);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		super.onCreateView(inflater, container, savedInstanceState);
		mLayoutInflater = inflater;
		return parentView;
	}

	// 楼盘名称标记
	private void addZiDingYiMarkersToMapV(String name, double latitude,
			double longtitude) {
		// 位置信息
		// 显示的内容
		View view = mLayoutInflater.inflate(R.layout.loupan_name_shsow, null);
		TextView districtName = (TextView) view.findViewById(R.id.loupan_name);
		districtName.setText(name);
		BitmapDescriptor markerIcon = BitmapDescriptorFactory.fromView(view);
		// 通过View获取BitmapDescriptor对象
		markerOptions.position(new LatLng(latitude, longtitude))
				.icon(markerIcon)
				// .title("loupan"+name)
				.draggable(true);
		// 添加到地图上
		myMarker = aMap.addMarker(markerOptions);
		myMarker.setObject("loupan" + name);
		float mZoom = aMap.getCameraPosition().zoom;
		if (mZoom < 12) {
			myMarker.setVisible(false);
		}
	}

	// 楼盘名称标记
	private void addZiDingYiMarkersToMap(String name, double latitude,
			double longtitude) {
		// 位置信息
		// 显示的内容
		View view = mLayoutInflater.inflate(R.layout.loupan_name_shsow, null);
		TextView districtName = (TextView) view.findViewById(R.id.loupan_name);
		districtName.setText(name);
		BitmapDescriptor markerIcon = BitmapDescriptorFactory.fromView(view);
		// 通过View获取BitmapDescriptor对象
		markerOptions.position(new LatLng(latitude, longtitude))
				.icon(markerIcon)
				// .title("loupan"+name)
				.draggable(true);
		// 添加到地图上
		myMarker = aMap.addMarker(markerOptions);
		myMarker.setObject("loupan" + name);
		myMarker.setVisible(false);
	}

	// 添加区标记
	private void addDistrictMarker(String name, String num, double latitude,
			double longtitude) {
		View view = mLayoutInflater.inflate(R.layout.district_name_shsow, null);
		TextView districtName = (TextView) view
				.findViewById(R.id.district_name);
		TextView districtNum = (TextView) view.findViewById(R.id.district_num);
		districtName.setText(name);
		districtNum.setText(num);
		BitmapDescriptor markerIcon = BitmapDescriptorFactory.fromView(view);
		markerOptions.position(new LatLng(latitude, longtitude))
				.icon(markerIcon)
				// .title("qu")
				.draggable(true);
		// 添加到地图上
		myMarker = aMap.addMarker(markerOptions);
		myMarker.setObject("qu");

	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		addChildView(R.layout.fragment_zhaofang);
		this.savedInstanceState = savedInstanceState;
	}

	@Override
	public void onResume() {
		super.onResume();
		if (mapView != null)
			mapView.onResume();
	}

	/**
	 * 方法必须重写 map的生命周期方法
	 */
	@Override
	public void onPause() {
		super.onPause();
		if (mapView != null)
			mapView.onPause();
		deactivate();
	}

	/**
	 * 方法必须重写 map的生命周期方法
	 */
	@Override
	public void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		if (mapView != null)
			mapView.onSaveInstanceState(outState);
	}

	/**
	 * 方法必须重写 map的生命周期方法
	 */
	@Override
	public void onDestroy() {
		super.onDestroy();
		if (mapView != null)
			mapView.onDestroy();
	}

	@Override
	public void onLocationChanged(AMapLocation aMapLocation) {
		if (mListener != null && aMapLocation != null) {
			if (aMapLocation.getErrorCode() == 0) {
				mListener.onLocationChanged(aMapLocation);// 显示系统小蓝点
				// mMapController.setCenter(point); //设置地图中心点
				// mMapController.animateTo(point);
				// super.onLocationChanged(location);
				// 获取位置信息
				geoLat = aMapLocation.getLatitude();
				geoLng = aMapLocation.getLongitude();
				// aMap.moveCamera(CameraUpdateFactory.zoomTo(12));

			} else {
				String errText = "定位失败," + aMapLocation.getErrorCode() + ": "
						+ aMapLocation.getErrorInfo();
				Log.e("AmapErr", errText);
			}

		}
	}

	// 激活定位
	@Override
	public void activate(OnLocationChangedListener listener) {
		mListener = listener;
		if (mlocationClient == null) {
			mlocationClient = new AMapLocationClient(getActivity());
			mLocationOption = new AMapLocationClientOption();
			// 设置定位监听
			mlocationClient.setLocationListener(this);
			mLocationOption.setOnceLocation(true);
			// 设置为高精度定位模式
			mLocationOption.setLocationMode(AMapLocationMode.Hight_Accuracy);
			// 设置定位参数
			mlocationClient.setLocationOption(mLocationOption);
			// 此方法为每隔固定时间会发起一次定位请求，为了减少电量消耗或网络流量消耗，
			// 注意设置合适的定位时间的间隔（最小间隔支持为2000ms），并且在合适时间调用stopLocation()方法来取消定位请求
			// 在定位结束后，在合适的生命周期调用onDestroy()方法
			// 在单次定位情况下，定位无论成功与否，都无需调用stopLocation()方法移除请求，定位sdk内部会移除
			mlocationClient.startLocation();
		}
	}

	// 停止定位
	@Override
	public void deactivate() {
		mListener = null;
		if (mlocationClient != null) {
			mlocationClient.stopLocation();
			mlocationClient.onDestroy();
		}
		mlocationClient = null;
	}

	@Override
	public boolean onMarkerClick(Marker marker) {
		// initPopuWindow1(mapView);
		// 设置中心点和缩放比例
		marker.hideInfoWindow();
		// 获取当前地图的缩放级别

		// if (marker.getTitle().contains("qu")) {
		if (marker.getObject().toString().contains("qu")) {
			float mZoom = aMap.getCameraPosition().zoom;
			aMap.moveCamera(CameraUpdateFactory.changeLatLng(marker
					.getPosition()));
			aMap.moveCamera(CameraUpdateFactory.zoomTo(12));
		}
		// if (marker.getTitle().contains("loupan")) {
		if (marker.getObject().toString().contains("loupan")) {
			for (int i = 0; i < loupanList.size(); i++) {
				// if(marker.getTitle()!=null)
				if (marker.getObject() != null)
					// if
					// (marker.getTitle().contains(loupanList.get(i).getBuildingName()))
					// {
					if (marker.getObject().toString()
							.contains(loupanList.get(i).getBuildingName())) {
						if (popupwindow != null) {
							popupwindow = null;
							popupwindow.dismiss();
						}
						initPopuWindow(
								mParent,
								loupanList.get(i).getBuildingName(),
								loupanList.get(i).getAveragePrice(),
								loupanList.get(i).getPosition(),
								loupanList.get(i).getBanner(),
								loupanList.get(i).getPhone(),
								loupanList.get(i).getBuildingId(),
								loupanList.get(i).getLatitude(),
								loupanList.get(i).getLongitude(),
								Const.YES.equals(loupanList.get(i).getIsPlan()),
								loupanList.get(i));
						MainActivity.INSTANCE.isShowBottomNavigation(false);
						if ("0".equals(preferenceUtils
								.getIsFirstZhaoFangLouPanIsData())) {
							initPopuWindowzhidaoLouPan();
							preferenceUtils.setIsFirstZhaoFangLouPanIsData("1");
						}
					}
			}
		}
		return false;
	}

	@Override
	public void onErrorResponse(VolleyError error) {
	}

	@Override
	public void onCameraChange(CameraPosition arg0) {
	}

	@Override
	public void onCameraChangeFinish(CameraPosition arg0) {
		// if(isInitZoom){
		// if(arg0.target.latitude != 41.781611)
		// return;
		// isInitZoom = false;
		// }else{
		if (aMap != null && aMap.getCameraPosition() != null) {
			VisibleRegion visibleRegion = aMap.getProjection()
					.getVisibleRegion();
			float mZoom = aMap.getCameraPosition().zoom;
			if (mZoom >= 12) {
				if (map == null)
					map = new HashMap<String, String>();
				isRefresh = true;
				LatLng latLngSouthwest = visibleRegion.latLngBounds.southwest;
				LatLng latLngNortheast = visibleRegion.latLngBounds.northeast;
				map.put(Const.PARAM_LONGITUDE, arg0.target.longitude + "");
				map.put(Const.PARAM_LATITUDE, arg0.target.latitude + "");
				map.put(Const.PARAM_LONGITUDESPAN,
						Math.abs(latLngSouthwest.longitude
								- latLngNortheast.longitude)
								+ "");
				map.put(Const.PARAM_LATITUDESPAN,
						Math.abs(latLngSouthwest.latitude
								- latLngNortheast.latitude)
								+ "");
				getLouPanXin(Const.URL_NAME_OF_HOUSES, map, false);
			} else {
				getLouPanArea();
			}
			// }
			judgeShowAreaOrDetail();
		}
	}

	private void judgeShowAreaOrDetail() {
		if (aMap != null && aMap.getCameraPosition() != null) {
			float mZoom = aMap.getCameraPosition().zoom;
			if (mZoom >= 12) {
				// 0.356532
				// 0.323639

				List<Marker> marker = aMap.getMapScreenMarkers();
				for (Marker marker1 : marker) {
					// if(marker1.getTitle()!=null){
					// if (("qu").equals(marker1.getTitle())) {
					if (marker1.getObject() != null) {
						if (("qu").equals(marker1.getObject().toString())) {
							marker1.setVisible(false);
						} else if (marker1.getObject().toString()
								.contains("loupan")) {
							marker1.setVisible(true);
						}
					}
				}
			} else if (mZoom < 12) {

				List<Marker> marker = aMap.getMapScreenMarkers();
				for (Marker marker2 : marker) {
					// if(marker1.getTitle()!=null){
					// if (("qu").equals(marker1.getTitle())) {
					if (marker2.getObject() != null) {
						if (("qu").equals(marker2.getObject().toString())) {
							marker2.setVisible(true);
						} else if (marker2.getObject().toString()
								.contains("loupan")) {
							marker2.setVisible(false);
						}
					}
				}
			}
		}
	}

	private boolean isRefresh;
	private Request requestLouPanXin;
	private int i;

	private void getLouPanXin(String url, Map<String, String> paramsContent,
			final boolean isMove) {
		if (cityOfHousesRequest != null)
			cityOfHousesRequest.cancel();
		if (requestLouPanXin != null)
			requestLouPanXin.cancel();
		requestLouPanXin = HttpRequest.get(activity, url, getRequestTag(),
				paramsContent, Utils.getHeaderParamsOnly(),
				new RequestListener() {
					@Override
					public void onSuccess(String url, String responseResult) {
						NameOfHousesResponse mNameOfHousesResponse = new Gson()
								.fromJson(responseResult,
										NameOfHousesResponse.class);
						loupanList = mNameOfHousesResponse.getDataList();
						if (aMap.getMapScreenMarkers() != null
								&& aMap.getMapScreenMarkers().size() > 0) {
							List<Marker> marker = aMap.getMapScreenMarkers();
							for (Marker marker1 : marker) {
								// if(marker1.getTitle()!=null)
								// if(marker1.getTitle().contains("loupan")) {
								// marker1.destroy();
								// }
								if (marker1.getObject() != null)
									if (marker1.getObject().toString()
											.contains("loupan")) {
										marker1.remove();
										marker1.destroy();
									}
								aMap.invalidate();
							}
						}
						if (loupanList != null && loupanList.size() > 0) {
							// if (isListFragment) {
							LouPanAdapter adapter = new LouPanAdapter(
									loupanList, mLayoutInflater, getActivity());
							houselist.setAdapter(adapter);
							houselist
							.setOnItemClickListener(new OnItemClickListener() {

								@Override
								public void onItemClick(
										AdapterView<?> parent,
										View view, int position,
										long id) {
									ListView lview = (ListView) parent;
									DataList item = (DataList) lview
											.getItemAtPosition(position);
									String buildingId = item
											.getBuildingId();
									String loupanName = item
											.getBuildingName();
//									data.putString(
//											Const.WEB_URL_KEY,
//											Const.SERVER_URL
//													+ "/app/v1/buildingInfo/"
//													+ buildingId);
									data.putSerializable(DataList.class.getSimpleName(), item);
//									data.putString(
//											Const.WEB_TITLE_KEY,
//											loupanName);
//									data.putString(
//											Const.PARAM_BUILDING_ID,
//											buildingId);
//									data.putString(
//											Const.PARAM_AREA_ID,
//											item.getScancodePrice());
//									data.putString(
//											Const.PARAM_PRICE_ID,
//											buildingId);
//									data.putString(
//											Const.PARAM_FEATURE_ID,
//											buildingId);
									Utils.moveTo(
											activity,
											BuildingDetailInfoActivity.class,
//											WebBuildingInfoActivity.class,
											false, data);
								}
							});
							// adapter.notifyDataSetChanged();
							// } else {
							try {
								double longitude = 0.0;
								double latitude = 0.0;
								for (int i = 0; i < loupanList.size(); i++) {
									if (null != loupanList.get(i)
											.getBuildingName()
											&& null != loupanList.get(i)
													.getLatitude()
											&& null != loupanList.get(i)
													.getLongitude()) {
										if (i == 0) {
											try {
												longitude = Double
														.parseDouble(loupanList
																.get(i)
																.getLongitude());
												latitude = Double
														.parseDouble(loupanList
																.get(i)
																.getLatitude());
											} catch (Exception e) {
											}
										}
										try {
											addZiDingYiMarkersToMapV(
													loupanList.get(i)
															.getBuildingName(),
													Double.parseDouble(loupanList
															.get(i)
															.getLatitude()),
													Double.parseDouble(loupanList
															.get(i)
															.getLongitude()));
										} catch (Exception e) {
										}
									}
								}
								if (isMove) {
									if (loupanList.size() > 0)
										ToastUtil.show(activity, "搜索到"
												+ loupanList.size() + "个楼盘信息!");
									else
										ToastUtil.show(activity, "没有搜索到楼盘信息!");
								}
								if (isMove && longitude > 0 && latitude > 0) {
									LatLng marker1 = new LatLng(latitude,
											longitude);
									aMap.moveCamera(CameraUpdateFactory
											.changeLatLng(marker1));
									aMap.moveCamera(CameraUpdateFactory
											.zoomTo(14));

								}
							} catch (Exception e) {
								e.printStackTrace();
							}
							// }
							houselist.stopRefresh(true);
						}
						closeBar();
						isRefresh = false;
						judgeShowAreaOrDetail();
					}

					@Override
					public void onFailure(String url, String errorInfo) {
						closeBar();
						houselist.stopRefresh(false);
						isRefresh = false;
						judgeShowAreaOrDetail();
					}

					@Override
					public void onError(String url, String responseResult) {
						closeBar();
						houselist.stopRefresh(false);
						isRefresh = false;
						judgeShowAreaOrDetail();
					}
				});
	}

//	public void getLouPan() {
//		HttpRequest.get(activity, Const.URL_NAME_OF_HOUSES, getRequestTag(),
//				null, Utils.getHeaderParamsOnly(activity),
//				new RequestListener() {
//
//					@Override
//					public void onSuccess(String url, String responseResult) {
//						NameOfHousesResponse response = new Gson().fromJson(
//								responseResult, NameOfHousesResponse.class);
//						if (response != null
//								&& response.getStatus().equals("1")) {// success
//																		// loupanList
//																		// =
//							response.getDataList();
//							try {
//								LouPanAdapter adapter = new LouPanAdapter(
//										loupanList, mLayoutInflater,
//										getActivity());
//								houselist.setAdapter(adapter);
//								houselist
//										.setOnItemClickListener(new OnItemClickListener() {
//
//											@Override
//											public void onItemClick(
//													AdapterView<?> parent,
//													View view, int position,
//													long id) {
//												ListView lview = (ListView) parent;
//												dataList item = (dataList) lview
//														.getItemAtPosition(position);
//												String buildingId = item
//														.getBuildingId();
//												String loupanName = item
//														.getBuildingName();
//												data.putString(
//														Const.WEB_URL_KEY,
//														Const.SERVER_URL
//																+ "/app/v1/buildingInfo/"
//																+ buildingId);
//												data.putString(
//														Const.WEB_TITLE_KEY,
//														loupanName);
//												data.putString(
//														Const.PLANS_INFOS_BUILDING_ID,
//														buildingId);
//												Utils.moveTo(
//														activity,
//														WebBuildingInfoActivity.class,
//														false, data);
//											}
//										});
//								for (int i = 0; i < response.getDataList()
//										.size(); i++) {
//									if (null != response.getDataList().get(i)
//											.getBuildingName()
//											&& null != response.getDataList()
//													.get(i).getLatitude()
//											&& null != response.getDataList()
//													.get(i).getLongitude()) {
//
//										addZiDingYiMarkersToMap(
//												response.getDataList().get(i)
//														.getBuildingName(),
//												Double.parseDouble(response
//														.getDataList().get(i)
//														.getLatitude()),
//												Double.parseDouble(response
//														.getDataList().get(i)
//														.getLongitude()));
//									}
//								}
//							} catch (Exception e) {
//								e.printStackTrace();
//							}
//						}
//					}
//
//					@Override
//					public void onError(String url, String responseResult) {
//					}
//
//					@Override
//					public void onFailure(String url, String errorInfo) {
//					}
//
//				});
//
//	}

	public void getLouPanQingDan() {
		PlansRequest request = new PlansRequest(new Listener<PlansResponse>() {
			@Override
			public void onResponse(PlansResponse response) {
				closeBar();
				if (response != null && response.getStatus().equals("1")) {// success
					if (response.getDataList() != null) {
						plansModel = response.getDataList();
						for (int i = 0; i < plansModel.size(); i++) {
							for (int j = 0; j < plansModel.get(i).getData()
									.size(); j++) {
								plansInfo.add(plansModel.get(i).getData()
										.get(j));
							}
						}
						if (0 < plansInfo.size()) {
							JiHuaFragment.isNullData = false;
						}
					}
				}
			}

		}, this);
		request.setToken(PreferenceUtils.getInstance(activity)
				.getSettingUserToken());
		request.setAppagent(PreferenceUtils.getInstance(activity)
				.getSettingUserAppAgent());
		request.setOsver(PreferenceUtils.getInstance(activity)
				.getSettingUserOSVer());
		request.setTransid(PreferenceUtils.getInstance(activity)
				.getSettingUserTransId());
		WebUtils.doPost(request);
	}

	private LinearLayout jihua;
	private ImageView image_jihua;
	private TextView text_jihua;

	// 楼盘详情信息显示
	private void initPopuWindow(View parent, final String loupanName,
			String loupanJiaqian, String loupanDizhi, String UserPic,
			final String phone, final String buildingId, final String lat,
			final String lon, boolean isPlan, final DataList dataList) {
		// if (popupwindow == null) {
		contentView = mLayoutInflater.inflate(R.layout.popview_loupan_item,
				null);
		LinearLayout xunwen = (LinearLayout) contentView
				.findViewById(R.id.xunwen);
		xunwen.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:"
						+ phone));
				// Intent intent=new
				// Intent(Intent.ACTION_CALL,Uri.parse("tel:"+phone));
				activity.startActivity(intent);
			}
		});
		LinearLayout daohang = (LinearLayout) contentView
				.findViewById(R.id.daohang);
		daohang.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				String uri = "http://m.amap.com/?from=" + geoLat + "," + geoLng
						+ "(from)&to=" + lat + "," + lon + "(to)";
				Intent it = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));
				it.setClassName("com.android.browser",
						"com.android.browser.BrowserActivity");
				activity.startActivity(it);
			}
		});
		jihua = (LinearLayout) contentView.findViewById(R.id.jihua);
		image_jihua = (ImageView) contentView.findViewById(R.id.image_jihua);
		text_jihua = (TextView) contentView.findViewById(R.id.text_jihua);
		if (!isPlan) {
			// jihua.setEnabled(true);
			jihua.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					if (!isLogin()) {
						getAlert().showLogin();
					} else {
						// if (0 < plansInfo.size()) {
						// for (int i = 0; i < plansInfo.size(); i++) {
						// if
						// (plansInfo.get(i).getBuildingId().equals(buildingId))
						// {
						// Utils.makeToastAndShow(getActivity(), "已经添加过该计划",
						// Toast.LENGTH_SHORT);
						// IsHaveBuildingId = true;
						// break;
						// }
						// }
						// } else {
						addPlans(dataList);
						// }
						// if (!IsHaveBuildingId) {
						// addPlans(dataList);
						// }
					}
				}
			});
		} else {
			// jihua.setEnabled(false);
			jihua.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
				}
			});
			image_jihua.setVisibility(View.GONE);
			text_jihua.setText("已加入计划");
			text_jihua.setTextColor(getResources().getColor(
					R.color.txt_color_disable));
		}

		RelativeLayout up_layout = (RelativeLayout) contentView
				.findViewById(R.id.up_layout);
		up_layout.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
//				data.putString(Const.WEB_URL_KEY, Const.SERVER_URL
//						+ "/app/v1/buildingInfo/" + buildingId);
//				data.putString(Const.WEB_TITLE_KEY, loupanName);
//				data.putString(Const.PLANS_INFOS_BUILDING_ID, buildingId);

				data.putSerializable(DataList.class.getSimpleName(), dataList);
				Utils.moveTo(activity, BuildingDetailInfoActivity.class, false,
						data);
			}
		});
		CircleImageViewWithBorder loupan_icon = (CircleImageViewWithBorder) contentView
				.findViewById(R.id.loupan_icon);
		ImageLoader.getInstance().displayImage(UserPic, loupan_icon);
		TextView loupan_name = (TextView) contentView
				.findViewById(R.id.loupan_name);
		loupan_name.setText(loupanName);
		TextView loupan_jiaqian = (TextView) contentView
				.findViewById(R.id.loupan_jiaqian);
		loupan_jiaqian.setText(loupanJiaqian + "元/平");
		TextView loupan_dizhi = (TextView) contentView
				.findViewById(R.id.loupan_dizhi);
		loupan_dizhi.setText(loupanDizhi);
		popupwindow = new PopupWindow(contentView,
				ViewGroup.LayoutParams.MATCH_PARENT,
				ViewGroup.LayoutParams.WRAP_CONTENT);
		// }

		ColorDrawable cd = new ColorDrawable(0x000000);
		popupwindow.setBackgroundDrawable(cd);
		// 产生背景变暗效果
		// WindowManager.LayoutParams lp =
		// getActivity().getWindow().getAttributes();
		// lp.alpha = 0.4f;
		// getActivity().getWindow().setAttributes(lp);

		popupwindow.setOutsideTouchable(true);
		popupwindow.setFocusable(true);
		popupwindow.showAtLocation((View) parent.getParent(), Gravity.BOTTOM
				| Gravity.CENTER_HORIZONTAL, 0, 20);

		popupwindow.update();
		popupwindow.setOnDismissListener(new OnDismissListener() {

			// 在dismiss中恢复透明度
			public void onDismiss() {
				WindowManager.LayoutParams lp = getActivity().getWindow()
						.getAttributes();
				lp.alpha = 1f;
				getActivity().getWindow().setAttributes(lp);
				MainActivity.INSTANCE.isShowBottomNavigation(true);
			}
		});
	}

	public void addPlans(final DataList dataList) {
		showBar();
		AddPlansRequest request = new AddPlansRequest(
				new Listener<HttpResponse>() {

					@Override
					public void onResponse(HttpResponse arg0) {
						closeBar();
						if (arg0 != null && arg0.getStatus().equals("1")) {
							dataList.setIsPlan(Const.YES);
							if (jihua != null) {
								jihua.setOnClickListener(new OnClickListener() {
									@Override
									public void onClick(View v) {
									}
								});
								image_jihua.setVisibility(View.GONE);
								text_jihua.setText("已加入计划");
								text_jihua.setTextColor(getResources()
										.getColor(R.color.txt_color_disable));
							}
							Utils.makeToastAndShow(getActivity(), "添加计划成功",
									Toast.LENGTH_SHORT);
							JiHuaFragment.isNullData = false;
						} else {
							if (ValidatorUtil.isValidString(arg0.getMsg())) {
								ToastUtil.show(activity, arg0.getMsg());
								if (arg0.getMsg().contains("已经加入")) {
									dataList.setIsPlan(Const.YES);
									if (jihua != null) {
										jihua.setOnClickListener(new OnClickListener() {
											@Override
											public void onClick(View v) {
											}
										});
										image_jihua.setVisibility(View.GONE);
										text_jihua.setText("已加入计划");
										text_jihua.setTextColor(getResources()
												.getColor(
														R.color.txt_color_disable));
									}
								}
							}
						}
					}
				}, this);
		request.setBuildingId(dataList.getBuildingId());
		request.setToken(PreferenceUtils.getInstance(getActivity())
				.getSettingUserToken());
		request.setAppagent(PreferenceUtils.getInstance(getActivity())
				.getSettingUserAppAgent());
		request.setOsver(PreferenceUtils.getInstance(getActivity())
				.getSettingUserOSVer());
		request.setTransid(PreferenceUtils.getInstance(getActivity())
				.getSettingUserTransId());
		WebUtils.doPost(request);
	}

	@Override
	public void onClick(View view) {
		switch (view.getId()) {
		/**
		 * 
		 */
		case R.id.iv_list:
			// Utils.moveTo(mActivity, LouPanActivity.class);
			if (!isListFragment) {
				isListFragment = true;
				houselist.setVisibility(View.VISIBLE);
				mapView.setVisibility(View.INVISIBLE);
				iv_list.setImageResource(R.drawable.nav_map);
				iv_home.setVisibility(View.INVISIBLE);
				iv_company.setVisibility(View.INVISIBLE);
			} else {
				isListFragment = false;
				houselist.setVisibility(View.INVISIBLE);
				mapView.setVisibility(View.VISIBLE);
				iv_list.setImageResource(R.drawable.nav_listicon);
				iv_home.setVisibility(View.VISIBLE);
				iv_company.setVisibility(View.VISIBLE);
			}
			break;
		case R.id.iv_bao:
			if (null == Utils.getHeaderParamsOnly()) {
				getAlert().showLogin();
				return;
			}
			Utils.moveTo(activity, CashRedPacketActivity.class);
			break;
		case R.id.ll_top_title:
			// Utils.moveTo(getActivity(), SeachActivity.class);
			Intent intent = new Intent();
			intent.setClass(getActivity(), SeachActivity.class);
			startActivityForResult(intent, 12);
			break;

		case R.id.company:
			String companylat = PreferenceUtils.getInstance(getActivity())
					.getSettingUserCompanyLatitude();
			String companylon = PreferenceUtils.getInstance(getActivity())
					.getSettingUserCompanyLongitude();
			if (!StringUtils.isEmpty(companylat)
					&& !StringUtils.isEmpty(companylon)) {
				LatLng marker1 = new LatLng(Double.parseDouble(companylat),
						Double.parseDouble(companylon));
				// 设置中心点和缩放比例
				aMap.moveCamera(CameraUpdateFactory.changeLatLng(marker1));
				aMap.moveCamera(CameraUpdateFactory.zoomTo(13));
			} else {
				Utils.moveTo(activity, ChangeAddressWordActivity.class);
			}
			break;
		case R.id.home:
			String homelat = PreferenceUtils.getInstance(getActivity())
					.getSettingUserHomeLatitude();
			String homelon = PreferenceUtils.getInstance(getActivity())
					.getSettingUserHomeLongitude();
			if (!StringUtils.isEmpty(homelat) && !StringUtils.isEmpty(homelon)) {
				LatLng marker1 = new LatLng(Double.parseDouble(homelat),
						Double.parseDouble(homelon));
				// 设置中心点和缩放比例
				aMap.moveCamera(CameraUpdateFactory.changeLatLng(marker1));
				aMap.moveCamera(CameraUpdateFactory.zoomTo(13));
			} else {
				Utils.moveTo(activity, ChangeAddressWordActivity.class);
			}
			break;
		}
	}

	@Override
	public void onChildViewLoaded() {
		spin_quyu = (Spinner) parentView.findViewById(R.id.spin_quyu);
		spin_jiage = (Spinner) parentView.findViewById(R.id.spin_jiage);
		spin_tese = (Spinner) parentView.findViewById(R.id.spin_tese);
		iv_bao = (ImageView) parentView.findViewById(R.id.iv_bao);
		iv_list = (ImageView) parentView.findViewById(R.id.iv_list);
		houselist = (ListViewWidget) parentView.findViewById(R.id.houselist);
		houselist.setListViewWidgetListener(this);
		tv_top_title = (LinearLayout) parentView
				.findViewById(R.id.ll_top_title);
		iv_list.setOnClickListener(this);
		tv_top_title.setOnClickListener(this);
		iv_bao.setOnClickListener(this);
		iv_home.setOnClickListener(this);
		iv_company.setOnClickListener(this);
		mapView.onCreate(savedInstanceState);
		if (aMap == null) {
			aMap = mapView.getMap();
			aMap.setLocationSource(this);// 设置定位监听
			aMap.getUiSettings().setMyLocationButtonEnabled(true);// 设置默认定位按钮是否显示
			aMap.setMyLocationEnabled(true);// 设置为true表示显示定位层并可触发定位，false表示隐藏定位层并不可触发定位，默认是false
			aMap.setOnMarkerClickListener(this);// 设置标记监听
			aMap.setOnCameraChangeListener(this);
			// 自定义系统定位蓝点
			MyLocationStyle myLocationStyle = new MyLocationStyle();
			// 自定义定位蓝点图标
			myLocationStyle.myLocationIcon(BitmapDescriptorFactory
					.fromResource(R.drawable.location_marker));
			myLocationStyle.strokeColor(Color.argb(0, 0, 0, 0));// 设置圆形的边框颜色
			myLocationStyle.radiusFillColor(Color.argb(0, 0, 0, 0));// 设置圆形的填充颜色
			// 将自定义的 myLocationStyle 对象添加到地图上
			aMap.setMyLocationStyle(myLocationStyle);
			// 构造 LocationManagerProxy 对象
			LatLng marker1 = new LatLng(41.781611, 123.401201);
			// // 设置中心点和缩放比例
			aMap.moveCamera(CameraUpdateFactory.zoomTo(10));
			aMap.moveCamera(CameraUpdateFactory.changeLatLng(marker1));
			// 的控制权,可以用它控制和驱动平移和缩放
		}
		initPopuWindowFirstRedPacket();
	}

	public boolean isLogin() {
		PreferenceUtils preferenceUtils = PreferenceUtils.getInstance(activity);
		String token = preferenceUtils.getSettingUserToken();
		if (token == null || StringUtils.isEmpty(token)) {
			return false;
		}
		return true;
	}

	@Override
	public void onReloadData() {

	}

	@Override
	public boolean onBackPressed() {
		return false;
	}

	@Override
	public String getRequestTag() {
		return null;
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (resultCode == 1) {
//			if (isListFragment) {
				Map<String, String> maps = new HashMap<String, String>();
				maps.put("buildingName", data.getStringExtra("buildingName"));
				showBar();
				getLouPanXin(Const.URL_NAME_OF_HOUSES, maps, false);
//				HttpRequest.post(activity, Const.URL_NAME_OF_HOUSES,
//						getRequestTag(), maps, new RequestListener() {
//							@Override
//							public void onSuccess(String url,
//									String responseResult) {
//								NameOfHousesResponse mNameOfHousesResponse = new Gson()
//										.fromJson(responseResult,
//												NameOfHousesResponse.class);
//								loupanList = mNameOfHousesResponse
//										.getDataList();
//								LouPanAdapter adapter = new LouPanAdapter(loupanList,
//										mLayoutInflater, getActivity());
//								adapter.notifyDataSetChanged();
//								houselist.setAdapter(adapter);
//								closeBar();
//							}
//
//							@Override
//							public void onFailure(String url, String errorInfo) {
//								closeBar();
//							}
//
//							@Override
//							public void onError(String url,
//									String responseResult) {
//								closeBar();
//							}
//						});
				

//			} else {
				if (null != data.getStringExtra("latitude")
						&& null != data.getStringExtra("longitude"))
					if (!"".equals(data.getStringExtra("latitude"))
							&& !"".equals(data.getStringExtra("longitude"))) {

						try {
							LatLng marker1 = new LatLng(Double.parseDouble(data
									.getStringExtra("latitude")),
									Double.parseDouble(data
											.getStringExtra("longitude")));
							// 设置中心点和缩放比例
							aMap.moveCamera(CameraUpdateFactory
									.changeLatLng(marker1));
							aMap.moveCamera(CameraUpdateFactory.zoomTo(13));
						} catch (NumberFormatException e) {
							e.printStackTrace();
						}
					}
//			}
		}
	}

	private void initPopuWindowFirstRedPacket() {
		XmlUtil xmlUtils = new XmlUtil(Const.USER_INFO);
		if (ValidatorUtil.isValidString(xmlUtils.get(Const.IS_FIRST_USE))) {
			return;
		}
		xmlUtils.set(Const.IS_FIRST_USE, Const.YES);
		if (popuWindow1 == null) {
			contentView1 = mLayoutInflater.inflate(
					R.layout.popuwindow_redbag_show, null);
			popuWindow1 = new PopupWindow(contentView1,
					ViewGroup.LayoutParams.WRAP_CONTENT,
					ViewGroup.LayoutParams.WRAP_CONTENT);
			ImageView close = (ImageView) contentView1.findViewById(R.id.close);
			close.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					popuWindow1.dismiss();
					// initPopuWindowzhidao();
				}
			});
			final ImageView show = (ImageView) contentView1
					.findViewById(R.id.show_content);
			show.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					numbers++;
					show.setImageResource(R.drawable.red_envelope_popup_window_whitebg);
					if (numbers > 2) {
						popuWindow1.dismiss();
						// initPopuWindowzhidao();
					}
				}
			});
		}

		ColorDrawable cd = new ColorDrawable(0x000000);
		popuWindow1.setBackgroundDrawable(cd);
		// 产生背景变暗效果
		WindowManager.LayoutParams lp = getActivity().getWindow()
				.getAttributes();
		lp.alpha = 0.4f;
		getActivity().getWindow().setAttributes(lp);

		popuWindow1.setOutsideTouchable(true);
		popuWindow1.setFocusable(true);
		popuWindow1.showAtLocation(parentView, Gravity.CENTER
				| Gravity.CENTER_HORIZONTAL, 0, 0);

		popuWindow1.update();
		popuWindow1.setOnDismissListener(new OnDismissListener() {

			// 在dismiss中恢复透明度
			public void onDismiss() {
				WindowManager.LayoutParams lp = getActivity().getWindow()
						.getAttributes();
				lp.alpha = 1f;
				getActivity().getWindow().setAttributes(lp);
				initPopuWindowzhidao();
			}
		});
	}

	@Override
	public void onRefresh() {
		isRefresh = true;
		getLouPanXin(Const.URL_NAME_OF_HOUSES, map, false);
	}

	@Override
	public void onLoadMore(int nextPage) {
	}

	private void initPopuWindowzhidao() {
		new Handler().postDelayed(new Runnable() {

			@Override
			public void run() {
				activity.runOnUiThread(new Runnable() {

					@Override
					public void run() {
						if (popuWindows == null) {
							contentViews = mLayoutInflater.inflate(
									R.layout.popuwindow_course_setzhaofang,
									null);
							popuWindows = new PopupWindow(contentViews,
									ViewGroup.LayoutParams.FILL_PARENT,
									ViewGroup.LayoutParams.FILL_PARENT);
							ImageView close = (ImageView) contentViews
									.findViewById(R.id.close);
							close.setOnClickListener(new OnClickListener() {

								@Override
								public void onClick(View v) {
									popuWindows.dismiss();
								}
							});
						}
						ColorDrawable cd = new ColorDrawable(0x000000);
						popuWindows.setBackgroundDrawable(cd);
						// 产生背景变暗效果
						popuWindows.setOutsideTouchable(true);
						popuWindows.setFocusable(true);
						popuWindows.showAtLocation(parentView, Gravity.TOP, 0,
								0);
					}
				});
			}
		}, 200);

	}

	private void initPopuWindowzhidaoLouPan() {
		if (popuWindowZhiDaoLouPan == null) {
			contentViewZhiDaoLouPan = mLayoutInflater.inflate(
					R.layout.popuwindow_course_setzhaofang_loupan, null);
			popuWindowZhiDaoLouPan = new PopupWindow(getActivity());
			popuWindowZhiDaoLouPan.setContentView(contentViewZhiDaoLouPan);
			popuWindowZhiDaoLouPan
					.setWidth(Utils.getDeviceWidth(getActivity()));
			popuWindowZhiDaoLouPan.setHeight(Utils
					.getDeviceHeight(getActivity()));
			ImageView close = (ImageView) contentViewZhiDaoLouPan
					.findViewById(R.id.close);
			close.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					popuWindowZhiDaoLouPan.dismiss();
				}
			});
		}
		ColorDrawable cd = new ColorDrawable(0x000000);
		popuWindowZhiDaoLouPan.setBackgroundDrawable(cd);
		// 产生背景变暗效果
		popuWindowZhiDaoLouPan.setOutsideTouchable(true);
		popuWindowZhiDaoLouPan.setFocusable(true);
		popuWindowZhiDaoLouPan.showAtLocation(parentView, Gravity.NO_GRAVITY,
				0, 0);
	}

	// @Override
	 public void onHiddenChanged(boolean hidden) {
		 aMap.invalidate();
		 getLouPanXin(Const.URL_NAME_OF_HOUSES, map, false);
	 }
}
